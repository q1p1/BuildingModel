const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/ElevationQuery-Ct1MeRg3.js","assets/index-DTNfjJk8.js"])))=>i.map(i=>d[i]);
import{l as m,d as g,j as w,S as f,t as T,e as S,f as b,U as p,g as _,_ as d,i as c,r as o,m as s,k as h,n as I,y as $,a as O,p as E}from"./index-DTNfjJk8.js";import{p as D}from"./ArcGISCachedService-BMiWGxZS.js";import{s as L,a as j}from"./LercDecoder-cjlop3tl.js";import"./TileInfoTilemapCache-D2guDBlU.js";import"./TilemapCache-BMhosA1Z.js";import"./WorkerHandle-B_jCcLLB.js";let a=class extends D(m(g(w(f(E))))){constructor(...t){super(...t),this.capabilities={operations:{supportsTileMap:!1}},this.copyright=null,this.heightModelInfo=null,this.path=null,this.minScale=void 0,this.maxScale=void 0,this.opacity=1,this.operationalLayerType="ArcGISTiledElevationServiceLayer",this.sourceJSON=null,this.type="elevation",this.url=null,this.version=null,this._lercDecoder=L()}normalizeCtorArgs(t,r){return typeof t=="string"?{url:t,...r}:t}destroy(){this._lercDecoder=T(this._lercDecoder)}readCapabilities(t,r){const e=r.capabilities&&r.capabilities.split(",").map(i=>i.toLowerCase().trim());return e?{operations:{supportsTileMap:e.includes("tilemap")}}:{operations:{supportsTileMap:!1}}}readVersion(t,r){let e=r.currentVersion;return e||(e=9.3),e}load(t){const r=t!=null?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"],supportsData:!1,validateItem:e=>{if(e.typeKeywords){for(let i=0;i<e.typeKeywords.length;i++)if(e.typeKeywords[i].toLowerCase()==="elevation 3d layer")return!0}throw new S("portal:invalid-layer-item-type","Invalid layer item type '${type}', expected '${expectedType}' ",{type:"Image Service",expectedType:"Image Service Elevation 3D Layer"})}},t).catch(b).then(()=>this._fetchImageService(r))),Promise.resolve(this)}fetchTile(t,r,e,i){const l=(i=i||{signal:null}).signal!=null?i.signal:i.signal=new AbortController().signal,u={responseType:"array-buffer",signal:l},v={noDataValue:i.noDataValue,returnFileInfo:!0};return this.load().then(()=>this._fetchTileAvailability(t,r,e,i)).then(()=>p(this.getTileUrl(t,r,e),u)).then(n=>this._lercDecoder.decode(n.data,v,l)).then(n=>new j(n))}getTileUrl(t,r,e){const i=!this.capabilities.operations.supportsTileMap&&this.supportsBlankTile,l=_({...this.parsedUrl.query,blankTile:!i&&null});return`${this.parsedUrl.path}/tile/${t}/${r}/${e}${l?"?"+l:""}`}async queryElevation(t,r){const{ElevationQuery:e}=await d(()=>import("./ElevationQuery-Ct1MeRg3.js"),__vite__mapDeps([0,1]));return c(r),new e().query(this,t,r)}async createElevationSampler(t,r){const{ElevationQuery:e}=await d(()=>import("./ElevationQuery-Ct1MeRg3.js"),__vite__mapDeps([0,1]));return c(r),new e().createSampler(this,t,r)}_fetchTileAvailability(t,r,e,i){return this.tilemapCache?this.tilemapCache.fetchAvailability(t,r,e,i):Promise.resolve("unknown")}async _fetchImageService(t){var i;if(this.sourceJSON)return this.sourceJSON;const r={query:{f:"json",...this.parsedUrl.query},responseType:"json",signal:t},e=await p(this.parsedUrl.path,r);e.ssl&&(this.url=(i=this.url)==null?void 0:i.replace(/^http:/i,"https:")),this.sourceJSON=e.data,this.read(e.data,{origin:"service",url:this.parsedUrl})}get hasOverriddenFetchTile(){return!this.fetchTile[y]}};o([s({readOnly:!0})],a.prototype,"capabilities",void 0),o([h("service","capabilities",["capabilities"])],a.prototype,"readCapabilities",null),o([s({json:{read:{source:"copyrightText"}}})],a.prototype,"copyright",void 0),o([s({readOnly:!0,type:I})],a.prototype,"heightModelInfo",void 0),o([s({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],a.prototype,"path",void 0),o([s({type:["show","hide"]})],a.prototype,"listMode",void 0),o([s({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],a.prototype,"minScale",void 0),o([s({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],a.prototype,"maxScale",void 0),o([s({json:{read:!1,write:!1,origins:{"web-document":{read:!1,write:!1}}}})],a.prototype,"opacity",void 0),o([s({type:["ArcGISTiledElevationServiceLayer"]})],a.prototype,"operationalLayerType",void 0),o([s()],a.prototype,"sourceJSON",void 0),o([s({json:{read:!1},value:"elevation",readOnly:!0})],a.prototype,"type",void 0),o([s($)],a.prototype,"url",void 0),o([s()],a.prototype,"version",void 0),o([h("version",["currentVersion"])],a.prototype,"readVersion",null),a=o([O("esri.layers.ElevationLayer")],a);const y=Symbol("default-fetch-tile");a.prototype.fetchTile[y]=!0;const P=a;export{P as default};

import{r as o,m as a,a as c,jK as m,aS as l,ap as w,e as p,jL as g,b6 as v,C as f,B as x,ab as F}from"./index-Dimyyb88.js";import{t as k}from"./FeatureLayerViewBase3D-tMzDXDBf.js";import{h as O}from"./WorkerHandle-UNPsaFO7.js";import{s as S}from"./highlightUtils-Bk1JkGqe.js";import"./HeatmapDensity.glsl-CYFMzBSG.js";import"./timeSupport-Brb44XUX.js";import"./utils-DSEEgd5h.js";import"./projectExtentUtils-C9UAWSXW.js";import"./geometryServiceUtils-DHnJo3V2.js";import"./dehydratedFeatureComparison-BstjLkm-.js";import"./utils-civ_g3s8.js";import"./queryForSymbologySnapping-Cg7wf-X8.js";import"./Graphics3DFeatureProcessor-BJU8lZPt.js";import"./hash-CcEbRgUF.js";import"./renderingInfoUtils-BvHjVlu9.js";import"./ExtentSet-DGhfHtDy.js";import"./optimizedFeatureQueryEngineAdapter-Buv8fp1n.js";import"./centroid-DdLmOD72.js";import"./PooledRBush-SrDdlSzG.js";import"./quickselect-QQC62dOK.js";import"./popupUtils-C4kPWITH.js";import"./Graphics3DObjectStates-dkKX4gVs.js";import"./attributeUtils-Dc8--CBJ.js";import"./floorFilterUtils-DZ5C6FQv.js";import"./QueryEngine-CUrMk6u8.js";import"./normalizeUtils-B2FAHJTd.js";import"./normalizeUtilsCommon-CmO8aETh.js";import"./WhereClause-BLxi6xXD.js";import"./TimeOnly-DvJILcMu.js";import"./queryUtils-BAYVEVNZ.js";import"./json-Wa8cmqdu.js";import"./QueryEngineCapabilities-DjYb9CEb.js";import"./utils-Cwt62ItM.js";import"./utils-tc5Qh7dU.js";import"./utils-B9f8-mm5.js";import"./ClassBreaksDefinition-D3h_Rxwt.js";import"./SnappingCandidate-O5eRSE6e.js";import"./FeatureStore-CZ4_S8H7.js";import"./BoundsStore-BjR4v_Q_.js";import"./LayerView3D-BJ0_08Cz.js";import"./query-3eOHDtn7.js";import"./pbfQueryUtils-C47DNXGV.js";import"./pbf-BO9_c9-m.js";import"./EventedSet-Cbhlx4oa.js";import"./LayerView-Dxh7zQS5.js";import"./RefreshableLayerView-CF4wD_n_.js";import"./languageUtils-DGTjvUWH.js";import"./ImmutableArray-BPVd6ESQ.js";import"./shared-sDhPgbUy.js";import"./number-CVX2AGqP.js";let n=class extends m{constructor(e){super(e),this.schedule=null,this._workerUpdating=!0}get updating(){return this._workerUpdating}initialize(){this._workerHandle=new _(this.schedule,this);const{layer:e,viewSpatialReference:t,renderSpatialReference:r}=this;this.addResolvingPromise((async()=>{var i,u;return await this._workerHandle.invokeMethod("setup",{url:((i=e.parsedUrl)==null?void 0:i.path)??"",baseQuery:e.createQuery().toJSON(),viewSpatialReference:t.toJSON(),renderSpatialReference:r.toJSON(),viewingMode:this.viewingMode,objectIdField:e.objectIdField,capabilities:e.capabilities,timeInfo:(u=e.timeInfo)==null?void 0:u.toJSON(),fieldsIndex:e.fieldsIndex.toJSON()})})()),this.addHandles(this._workerHandle.on("notify-updating",({updating:i})=>{this._workerUpdating=i}))}async onTileTreeChange({added:e,removed:t}){if(e.length===0&&t.length===0)return;const r=e.map(H),i=t.map(Q);await this._workerHandle.invokeMethod("onTileTreeChange",{added:r,removed:i})}async executeQuery(e,t){const r=await this._workerHandle.invokeMethod("executeQuery",e==null?void 0:e.toJSON(),t),i=l.fromJSON(r);return this._ensureLayerOnFeatures(i),i}async executeQueryForIds(e,t){return await this._workerHandle.invokeMethod("executeQueryForIds",e==null?void 0:e.toJSON(),t)}async executeQueryForCount(e,t){return await this._workerHandle.invokeMethod("executeQueryForCount",e==null?void 0:e.toJSON(),t)}async executeQueryForExtent(e,t){const{count:r,extent:i}=await this._workerHandle.invokeMethod("executeQueryForExtent",e==null?void 0:e.toJSON(),t);return{count:r,extent:w.fromJSON(i)}}async executeQueryForLatestObservations(e,t){const r=await this._workerHandle.invokeMethod("executeQueryForLatestObservations",e==null?void 0:e.toJSON(),t),i=l.fromJSON(r);return this._ensureLayerOnFeatures(i),i}_ensureLayerOnFeatures(e){const{layer:t}=this;for(const r of e.features)r.layer=t,r.sourceLayer=t}};o([a()],n.prototype,"updating",null),o([a({constructOnly:!0})],n.prototype,"schedule",void 0),o([a({constructOnly:!0})],n.prototype,"layer",void 0),o([a({constructOnly:!0})],n.prototype,"viewSpatialReference",void 0),o([a({constructOnly:!0})],n.prototype,"renderSpatialReference",void 0),o([a({constructOnly:!0})],n.prototype,"viewingMode",void 0),o([a({constructOnly:!0})],n.prototype,"dispatchRenderCommands",void 0),o([a()],n.prototype,"_workerUpdating",void 0),n=o([c("esri.views.3d.layers.graphics.pipeline.Feature3DPipelineWorkerHandle")],n);class _ extends O{constructor(t,r){super("Feature3DPipelineWorker","setup",{},t,{strategy:"dedicated",client:r})}}function H({id:e,lij:t,extent:r}){return{id:e,lij:t,extent:r}}function Q({id:e}){return e}let d=class extends m{constructor(e){super(e),this._renderer=null,this.graphicsQuery={queryForSymbologySnapping:(t,r)=>{throw new p("unsupported-symbology-snapping")},executeQuery:async(t,r)=>await this._workerHandle.executeQuery(t,r),executeQueryForIds:async(t,r)=>await this._workerHandle.executeQueryForIds(t,r),executeQueryForCount:async(t,r)=>await this._workerHandle.executeQueryForCount(t,r),executeQueryForExtent:async(t,r)=>await this._workerHandle.executeQueryForExtent(t,r),executeQueryForLatestObservations:async(t,r)=>await this._workerHandle.executeQueryForLatestObservations(t,r)},this.maximumNumberOfFeatures=1e3}initialize(){if(this.layerView.layer.geometryType!=="point")throw new p("unsupported-geometry-type",`${this.layerView.layer.geometryType} is not supported`);this.addResolvingPromise(this.setup())}async setup(){const{layer:e,view:t}=this.layerView,{spatialReference:r,renderSpatialReference:i,resourceController:u}=t,y=t.state.viewingMode;if(this._renderer=new g({view:t,layerUid:e.uid}),e.type!=="feature")throw new Error("Only FeatureLayer is supported");const h=new n({schedule:s=>u.immediate.schedule(s),layer:e,viewSpatialReference:r,renderSpatialReference:i,viewingMode:y,dispatchRenderCommands:s=>this._renderer.executeRenderCommands(s)});this._workerHandle=await h.when(),this.addHandles([this.layerView.view.featureTiles.addClient(),v(()=>this.layerView.view.featureTiles.tiles,"change",s=>{this._workerHandle.onTileTreeChange(s)},{onListenerAdd:s=>this._workerHandle.onTileTreeChange({added:s.toArray(),removed:[]}),onListenerRemove:s=>this._workerHandle.onTileTreeChange({added:[],removed:s.toArray()})})])}get legendEnabled(){return!1}get hasAllFeatures(){return!1}get hasAllFeaturesInView(){return!1}get hasFullGeometries(){return!1}get symbologySnappingSupported(){return!1}get scaleVisibilitySuspended(){return!1}get suspendInfo(){return{}}get updating(){return this._workerHandle.updating}get dataUpdating(){return!1}get updatePolicy(){return f.ASYNC}get maximumNumberOfFeaturesExceeded(){return!1}get updatingProgressValue(){return 1}get usedMemory(){return 100}get unloadedMemory(){return 0}get ignoresMemoryFactor(){return!0}get performanceInfo(){return new k(new x(this.usedMemory,0,0,this.maximumNumberOfFeatures,0,null),0,0,!0,"tiles","n/a")}get suspendResumeExtentMode(){return"computed"}forEachGraphic(e){}findGraphic(e){return null}highlight(e){return S}maskOccludee(e){return F()}async whenGraphicBounds(e,t){return null}computeAttachmentOrigin(e,t){return null}elevationAlignPointsInFeatures(e,t){throw new p("unsupported-elevation-alignment")}async doRefresh(e){}setVisibility(e,t){}getMissingAttributesForFeature(e){return null}getHydratedGeometry(e){return null}};o([a()],d.prototype,"layerView",void 0),o([a()],d.prototype,"updating",null),d=o([c("esri.views.3d.layers.graphics.pipeline.Feature3DPipeline")],d);export{d as Feature3DPipeline};

import{A as l,u as h,c,e as d,C as u,B as m,r as t,m as o,a as y}from"./index-CfghLkOD.js";import{l as g}from"./LayerView3D-sULG9RmJ.js";import{m as b,r as f}from"./queryForSymbologySnapping-3YeQEEdf.js";import{x as v}from"./GraphicsProcessor-4-vrp3ek.js";import{r as S}from"./projectExtentUtils-E8A97pf_.js";import{y as w}from"./LayerView-D7M_Uj7A.js";import"./renderingInfoUtils-D-7FENQo.js";import"./ExtentSet-tKvS5weq.js";import"./optimizedFeatureQueryEngineAdapter-ecw-c5oW.js";import"./centroid-DdLmOD72.js";import"./PooledRBush-tQ9HncAx.js";import"./quickselect-QQC62dOK.js";import"./popupUtils-Cfa6JXbX.js";import"./Graphics3DObjectStates-CyZjSBc_.js";import"./highlightUtils-C504RVTz.js";import"./languageUtils-CgjwfFgh.js";import"./TimeOnly-Ds2GIh_Z.js";import"./ImmutableArray-BPVd6ESQ.js";import"./shared-D8Zo7Tkv.js";import"./number-CT6PB8t8.js";import"./geometryServiceUtils-C1CaAp5_.js";let s=class extends g(w){constructor(){super(...arguments),this.type="graphics-3d",this.symbologySnappingSupported=!0,this._slicePlaneEnabled=!1,this.fullExtentInLocalViewSpatialReference=null,this.ignoresMemoryFactor=!0}initialize(){this._set("processor",new v({owner:this,scaleVisibilityEnabled:!0,frustumVisibilityEnabled:!0})),this.addResolvingPromise(this.processor.initializePromise),this.addHandles(this.layer.on("graphic-update",e=>this.processor.graphicsCore.graphicUpdateHandler(e))),this.addResolvingPromise(S(this).then(e=>this.fullExtentInLocalViewSpatialReference=e)),this.layer.internal?this.notifyChange("updating"):this.addHandles(l(()=>{var e,r;return(r=(e=this.view)==null?void 0:e.basemapTerrain)==null?void 0:r.ready},()=>()=>this.notifyChange("updating"),{once:!0}))}destroy(){this._updatingHandles.removeAll(),this._set("processor",h(this.processor))}get loadedGraphics(){return this.layer.graphics}get legendEnabled(){var e;return this.canResume()&&!((e=this.processor)!=null&&e.frustumVisibilitySuspended)}get visibleAtCurrentScale(){var e;return!((e=this.processor)!=null&&e.scaleVisibilitySuspended)}get slicePlaneEnabled(){const e=this.layer.internal;return this._slicePlaneEnabled&&!e}set slicePlaneEnabled(e){this._slicePlaneEnabled=e}getSuspendInfo(){var r;const e=super.getSuspendInfo();return e.outsideOfView=((r=this.processor)==null?void 0:r.frustumVisibilitySuspended)??!1,e}getHit(e){return this.processor.getHit(e)}whenGraphicBounds(e,r){return this.processor.whenGraphicBounds(e,r)}computeAttachmentOrigin(e,r){var i;return(i=this.processor)==null?void 0:i.computeAttachmentOrigin(e,r)}getSymbolLayerSize(e,r){return this.processor.getSymbolLayerSize(e,r)}queryGraphics(){return Promise.resolve(this.loadedGraphics)}maskOccludee(e){return this.processor.maskOccludee(e)}highlight(e,r){return this.processor.highlight(e,r??c)}async elevationAlignPointsInFeatures(e,r){const{processor:i}=this;if((i==null?void 0:i.graphics3DGraphics)==null)throw new d("graphicslayerview3d:missing-processor","A Graphics3D processor is needed to resolve graphics elevation.");const{graphics3DGraphics:n}=i,p=a=>typeof a=="number"?n.get(a):void 0;return b(this.view,this.layer,p,e,r)}async queryForSymbologySnapping(e,r){return f(this.processor,e,r)}get updatePolicy(){var e;return((e=this.processor)==null?void 0:e.graphicsCore.effectiveUpdatePolicy)||u.SYNC}isUpdating(){var e,r;return this.view&&this.layer&&!(!((e=this.processor)!=null&&e.updating)&&(this.layer.internal||(r=this.view.basemapTerrain)!=null&&r.ready))}get performanceInfo(){return new m(this.usedMemory,this.loadedGraphics.length,-1,-1)}get usedMemory(){var e,r;return((r=(e=this.processor)==null?void 0:e.graphicsCore)==null?void 0:r.usedMemory)??0}get unloadedMemory(){var e,r;return(r=(e=this.processor)==null?void 0:e.graphicsCore)==null?void 0:r.unprocessedMemoryEstimate}get test(){return{graphics3DProcessor:this.processor,loadedGraphics:this.loadedGraphics}}};t([o()],s.prototype,"loadedGraphics",null),t([o({readOnly:!0})],s.prototype,"legendEnabled",null),t([o()],s.prototype,"layer",void 0),t([o({readOnly:!0})],s.prototype,"processor",void 0),t([o({readOnly:!0})],s.prototype,"visibleAtCurrentScale",null),t([o()],s.prototype,"_slicePlaneEnabled",void 0),t([o({type:Boolean})],s.prototype,"slicePlaneEnabled",null),s=t([y("esri.views.3d.layers.GraphicsLayerView3D")],s);const q=s;export{q as default};

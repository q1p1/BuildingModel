import{av as $,ib as O,ic as P,i as D,d$ as q,id as E,ie as G,ig as H,ih as A,ii as B,bH as J,c1 as N}from"./index-Dr8Kof1t.js";async function W(t,d,l,p,i){const{elevationProvider:f,renderCoordsHelper:r}=t,{elevationInfo:u}=d,{pointsInFeatures:m,spatialReference:g}=p,h=$.fromJSON(g),y=O(u,!0),I=await P(y,h,i);D(i);const c=[],e=new Set,s=new Set,a=new A,n=q(0,0,0,$.WGS84),o=new B,R=J();n.spatialReference=h;const j=t.elevationProvider.spatialReference??t.spatialReference;for(const{objectId:v,points:S}of m){const b=l(v);if(b==null){for(const w of S)c.push(w.z??0);e.add(v);continue}b.isDraped&&s.add(v);const z=b.graphic.geometry;a.setFromElevationInfo(E(z,u)),a.updateFeatureExpressionInfoContext(I,b.graphic,d);for(const{x:w,y:C,z:F}of S)n.x=w,n.y=C,n.z=F??0,await G(n,R,j,0,{signal:i}),H(R,f,a,r,o),c.push(o.z)}return{elevations:c,drapedObjectIds:s,failedObjectIds:e}}async function k(t,d,l){if(t==null||d.candidates.length===0)return x;const p=t.graphics3DGraphicsByObjectID??t.graphics3DGraphics,i=[],f=[],{renderer:r}=t,u=r!=null&&"arcadeRequired"in r&&r.arcadeRequired?N():null,m=async(e,{graphic:s,graphics3DSymbol:a})=>{const n=await u,o=await t.getRenderingInfoAsync(s,r,n,{signal:l});return o==null?[]:a.queryForSnapping(e,h,o,l)},{candidates:g,spatialReference:h}=d;for(let e=0;e<g.length;++e){const s=g[e],{objectId:a}=s,n=typeof a=="number"?p==null?void 0:p.get(a):void 0;if(n==null)continue;const{graphics3DSymbol:o}=n;o.symbologySnappingSupported&&(i.push(m(s,n)),f.push(e))}if(i.length===0)return x;const y=await Promise.all(i);D(l);const I=[],c=[];for(let e=0;e<y.length;++e){const s=y[e],a=f[e];for(const n of s)I.push(n),c.push(a)}return{candidates:I,sourceCandidateIndices:c}}const x={candidates:[],sourceCandidateIndices:[]};export{W as m,k as r};

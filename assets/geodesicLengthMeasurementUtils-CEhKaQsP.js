import{cl as i,cf as l,bH as u,iD as a}from"./index-o1YlnJfN.js";import{geodesicLength as c}from"./geometryEngine-DDEPHPB7.js";import{y as f,q as m,b as y,R}from"./viewUtils-BbcSFc7e.js";function q(e){return f(e)||i(e)}function p(e,n,r,...o){return f(e)?n.apply(void 0,o):i(e)?r.apply(void 0,o):null}const w=1e5;function C(e){const{spatialReference:n}=e;return p(n,g,x,e)}function D(e,n){if(!l(e.spatialReference,n.spatialReference))return null;const{spatialReference:r}=e;return t[0]=e.x,t[1]=e.y,t[2]=e.hasZ?e.z:0,s[0]=n.x,s[1]=n.y,s[2]=n.hasZ?n.z:0,d(t,s,r)}function d(e,n,r){return p(r,h,$,e,n,r)}function h(e,n,r){return a(m(v,e,n,r).distance,"meters")}function $(e,n,r){return a(c(b(e,n,r),"meters"),"meters")}function g(e){return a(R([e],"meters")[0],"meters")}function x(e){return a(c(e,"meters"),"meters")}function b(e,n,r){return{type:"polyline",spatialReference:r,paths:[[[...e],[...n]]]}}const v=new y,t=u(),s=u();export{q as e,D as f,C as m,w as p,p as r,d as u};

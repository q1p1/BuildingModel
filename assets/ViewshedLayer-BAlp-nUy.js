import{V as P,r as s,m as n,D as C,a as j,E as F,N as S,G as D,jH as G,e9 as _,ap as J,e6 as R,iv as A,d as U,S as X,bh as k,p as B}from"./index-CfghLkOD.js";import{d as T}from"./Viewshed-6SU4kD8g.js";import{c as I}from"./Analysis-Bfhy9rui.js";import"./featureReferenceUtils-Bi2RuaP6.js";const z=P.ofType(T);let a=class extends I{constructor(e){super(e),this.type="viewshed",this._extent=null}initialize(){this.addHandles(F(()=>this._computeExtent(),e=>{e.pending==null&&(this._extent=e.extent)},S))}get viewsheds(){return this._get("viewsheds")||new z}set viewsheds(e){this._set("viewsheds",D(e,this.viewsheds,z))}get spatialReference(){for(const e of this.viewsheds)if(e.observer!=null)return e.observer.spatialReference;return null}get extent(){return this._extent}get requiredPropertiesForEditing(){return this.viewsheds.items.map(({observer:e})=>e)}async waitComputeExtent(){const e=this._computeExtent();e.pending!=null&&await e.pending}_computeExtent(){const{spatialReference:e}=this;if(e==null)return{pending:null,extent:null};const p=this.viewsheds.filter(i=>i.observer!=null),c=p.map(i=>i.observer).toArray(),o=G(c,e);return o.pending!=null?{pending:o.pending,extent:null}:{pending:null,extent:o.geometries.map((i,u)=>{const g=p.at(u);return i!=null&&g!=null?this._computeViewshedExtent(this.viewsheds.at(u),i):null}).filter(i=>i!=null).reduce((i,u)=>K(i,u),null)}}_computeViewshedExtent(e,p){const{farDistance:c,heading:o,tilt:i,horizontalFieldOfView:u,verticalFieldOfView:g}=e,{spatialReference:v}=p,b=u/2,O=g/2,V=c/v.metersPerUnit,H=[_.normalize(o-b),o,_.normalize(o+b)],d=J.fromPoint(p),f=m=>{const h=H.map(l=>_.normalize(l-m));if(h[0]>h[2]||u===360)return V;const y=h.map(l=>Math.abs(l>180?360-l:l)).reduce((l,x)=>l>x?x:l);return y>90?0:V*Math.cos(R(y))};d.xmax+=f(90),d.xmin-=f(-90),d.ymax+=f(0),d.ymin-=f(180);const w=p.z;if(w!=null){let m=w,h=w;const y=i-90,l=A(y+O,-90,90),x=A(y-O,-90,90),E=v!=null&&v.isGeographic?c:V;m+=E*$(l),h+=E*$(x);const q=L(O)*E,M=$(y)*q*(1-L(b));i<90&&(m-=M),i>90&&(h-=M),d.zmax=Math.max(m,w),d.zmin=Math.min(h,w)}return d}clear(){this.viewsheds.removeAll()}};function K(t,e){return t==null?e:e==null?t:t.union(e)}function L(t){return Math.cos(R(t))}function $(t){return Math.sin(R(t))}s([n({type:["viewshed"]})],a.prototype,"type",void 0),s([n({cast:C,type:z,nonNullable:!0})],a.prototype,"viewsheds",null),s([n({readOnly:!0})],a.prototype,"spatialReference",null),s([n()],a.prototype,"_extent",void 0),s([n({readOnly:!0})],a.prototype,"extent",null),s([n({readOnly:!0})],a.prototype,"requiredPropertiesForEditing",null),a=s([j("esri.analysis.ViewshedAnalysis")],a);const N=a;let r=class extends U(X(B)){constructor(t){super(t),this.type="viewshed",this.operationalLayerType="ViewshedLayer",this.source=new N,this.opacity=1}initialize(){this.addHandles(F(()=>this.source,(t,e)=>{e!=null&&e.parent===this&&(e.parent=null),t!=null&&(t.parent=this)},S))}async load(){return this.addResolvingPromise(this.source.waitComputeExtent()),this}get spatialReference(){return this.source.spatialReference}get fullExtent(){return this.source.extent}releaseAnalysis(t){this.source===t&&(this.source=new N)}get analysis(){return this.source}set analysis(t){this.source=t}get viewsheds(){return this.source.viewsheds}set viewsheds(t){this.source.viewsheds=t}writeViewsheds(t,e,p,c){e.viewsheds=t.filter(o=>o.isValid()).map(o=>o.toJSON(c)).toJSON()}};s([n({json:{read:!1},readOnly:!0})],r.prototype,"type",void 0),s([n({type:["ViewshedLayer"]})],r.prototype,"operationalLayerType",void 0),s([n({nonNullable:!0})],r.prototype,"source",void 0),s([n({readOnly:!0})],r.prototype,"spatialReference",null),s([n({readOnly:!0})],r.prototype,"fullExtent",null),s([n({readOnly:!0,json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}}})],r.prototype,"opacity",void 0),s([n({type:["show","hide"]})],r.prototype,"listMode",void 0),s([n({type:P.ofType(T),json:{write:{ignoreOrigin:!0},origins:{"web-scene":{write:{ignoreOrigin:!0}}}}})],r.prototype,"viewsheds",null),s([k("web-scene","viewsheds")],r.prototype,"writeViewsheds",null),r=s([j("esri.layers.ViewshedLayer")],r);const te=r;export{te as default};

import{J as p,e as n,r as o,m as l,a as m}from"./index-CfghLkOD.js";import{l as h}from"./LayerView3D-sULG9RmJ.js";import{p as u}from"./TiledLayerView3D-CpzOp-Em.js";import{i as f}from"./fetchTile-B33n3T3n.js";import{y}from"./LayerView-D7M_Uj7A.js";import{i as c}from"./RefreshableLayerView-I8S3TLgO.js";import{_ as d,R as g}from"./MapServiceLayerViewHelper-DE6tDrAp.js";import{r as x}from"./drapedUtils-B6U-kody.js";import"./languageUtils-CgjwfFgh.js";import"./TimeOnly-Ds2GIh_Z.js";import"./ImmutableArray-BPVd6ESQ.js";import"./shared-D8Zo7Tkv.js";import"./number-CT6PB8t8.js";import"./floorFilterUtils-DZ5C6FQv.js";import"./normalizeUtils-B_K5T9pJ.js";import"./normalizeUtilsCommon-BHZVZHaX.js";import"./sublayerUtils-BP2URFV5.js";import"./highlightUtils-C504RVTz.js";import"./popupUtils-Cfa6JXbX.js";let i=class extends c(u(h(y))){constructor(){super(...arguments),this.type="tile-3d",this._popupHighlightHelper=null}get imageFormatIsOpaque(){return this.layer.tileInfo.format==="jpg"}get hasMixedImageFormats(){return this.layer.tileInfo.format==="mixed"}get tileInfo(){return this.layer.tileInfo}initialize(){var e,r;if(this.layer.type==="web-tile"){const t=(e=this.layer.fullExtent)==null?void 0:e.spatialReference,s=(r=this.layer.tileInfo)==null?void 0:r.spatialReference;if(t==null||s==null||!p(t,s)){const a=this.layer.originOf("fullExtent")==="defaults"||this.layer.fullExtent==null?"SceneView requires fullExtent to be specified by the user on WebTileLayer":"SceneView requires fullExtent to be specified in the same spatial reference as tileInfo on WebTileLayer";this.addResolvingPromise(Promise.reject(new n("layerview:incompatible-fullextent",a)))}}d(this,this.layer)&&(this._popupHighlightHelper=new g({createFetchPopupFeaturesQueryGeometry:(t,s)=>x(t,s,this.view),layerView:this,updatingHandles:this._updatingHandles})),this._addTilingSchemeMatchPromise()}destroy(){var e;(e=this._popupHighlightHelper)==null||e.destroy()}async fetchTile(e,r){return f(this,e,r)}async fetchPopupFeaturesAtLocation(e,r){var t;return((t=this._popupHighlightHelper)==null?void 0:t.fetchPopupFeaturesAtLocation(e,r))??[]}async doRefresh(){this.suspended||this.emit("data-changed")}};o([l()],i.prototype,"imageFormatIsOpaque",null),o([l()],i.prototype,"hasMixedImageFormats",null),o([l()],i.prototype,"layer",void 0),o([l()],i.prototype,"tileInfo",null),i=o([m("esri.views.3d.layers.TileLayerView3D")],i);const A=i;export{A as default};
